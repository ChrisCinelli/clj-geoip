{"name":"Clj-geoip","body":"# clj-geoip\r\n\r\n`clj-geoip` is a thin [Clojure](http://www.clojure.com) layer on top\r\nof the [MaxMind GeoIP Java API](http://www.maxmind.com/). It allows\r\nyou to query information like the country, city or network provider of\r\na given IP. Have a look at the usage section for an example.\r\n\r\n\"This product includes GeoLite data created by MaxMind, available from [http://www.maxmind.com/](http://www.maxmind.com/).\"\r\n\r\n## Preparation\r\n\r\nTo use `clj-geoip` you first need to download the newest version of\r\nthe free GeoIP data files. To do so you can use the download script\r\n`UpdateGeoIpFiles.sh` provided in the `scripts` folder. \r\nIt simply downloads the newest archives and extracts them into\r\nthe `resources` folder.\r\n\r\n[MaxMind](http://www.maxmind.com/) provides new versions of the data\r\nfiles on a monthly basis. So it's a good idea to run the script every\r\nnow and then.\r\n\r\nFurthermore you have to compile the MaxMind Java classes first. Just\r\nrun the Leiningen javac command to do so.\r\n\r\n    > lein javac\r\n\r\n## Usage\r\n\r\nThis API is pretty simple, just have a look at the following code:\r\n\r\n    user> (use 'clj-geoip.core)\r\n    nil\r\n    user> (geoip-init)\r\n    true\r\n    user> (use 'clojure.pprint)\r\n    nil\r\n    user> (pprint (lookup \"87.152.91.74\"))\r\n    {:countryName \"Germany\",\r\n     :area-code 0,\r\n     :asn \"AS3320 Deutsche Telekom AG\",\r\n     :longitude 7.399994,\r\n     :postalCode nil,\r\n     :latitude 50.983307,\r\n     :city \"Engelskirchen\",\r\n     :metro-code 0,\r\n     :region \"07\",\r\n     :countryCode \"DE\",\r\n     :dma-code 0,\r\n     :ip \"87.152.91.74\"}\r\n    nil\r\n    user> (geoip-close)\r\n    true\r\n\r\nUse `geoip-init` and `geoip-close` to start and stop the service and `lookup` to\r\nlookup information about the given IP.\r\n\r\nThe data files are expected to be in the `resources` folder but it's\r\npossible to bind the locations in the `clj-geoip.core/*dbs*` symbol to a new value.\r\n\r\n## Ring Handler\r\n\r\nYou can use the provided ring handler to add location information to\r\nthe request map. Here is a Noir example:\r\n    \r\n    (use 'clj-geoip.handler)\r\n    (add-middleware #'geoip-handler)\r\n    (defpage \"/\" []\r\n        (str (:location (ring-request))))\r\n    ;; -> {:countryName \"United States\", :area-code 650, :longitude -122.0574, :postalCode \"94043\", :latitude 37.419205, :city \"Mountain View\", :metro-code 807, :region \"CA\", :countryCode \"US\", :dma-code 807, :asn \"AS15169 Google Inc.\", :ip \"209.85.148.100\"}\r\n    \r\n## TODO\r\n\r\n- [X] Pass through of `LookupService` modes.\r\n- [X] Ring handler to inject location information into the request map.\r\n- Is the `geoip-close` method really necessary? \r\n- Add IPv6 functions.\r\n- Add function to calculate the distance between two IPs.\r\n- Noir test application on Heroku. \r\n\r\n## License\r\n\r\nCopyright (C) 2012\r\n\r\nDistributed under the Eclipse Public License, the same as Clojure.","tagline":"Clojure GeoIP","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}